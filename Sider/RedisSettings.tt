<#@ template language="C#" hostspecific="true" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var configs = new Dictionary<string, object> {
    { "Host", "localhost" },
    { "Port", 6379 },
  };
#>
// <auto-generated />
using System;

namespace Sider {
  public partial class RedisSettings : ICloneable {
<#foreach (var pair in configs) { #>
<#  if (pair.Value is string) { #>
    public string <#= pair.Key #> { get; internal set; }
<#  }
    else if (pair.Value is int) { #>
    public int <#= pair.Key #> { get; internal set; }
<#  } #>
<#} #>

    public RedisSettings() {
<#foreach (var pair in configs) { #>
<#  if (pair.Value is string) { #>
      <#= pair.Key #> = "<#= pair.Value #>";
<#  }
    else if (pair.Value is int) { #>
      <#= pair.Key #> = <#= pair.Value #>;
<#  } #>
<#} #>
    }

    object ICloneable.Clone() {
      return new RedisSettings()
      {
<#foreach (var pair in configs) { #>
        <#= pair.Key #> = <#= pair.Key #>,
<#} #>
      };
    }

    public override int GetHashCode() {
      int hash = 17;
<#foreach (var pair in configs) { #>
      hash = hash * 23 + <#= pair.Key #>.GetHashCode();
<#} #>

      return hash;
    }

    public override bool Equals(object obj) {
      if (obj == null) return false;

      var settings = obj as RedisSettings;
      if (settings == null) return false;

      var eq = true;
<#foreach (var pair in configs) { #>
      eq = eq && object.Equals(<#= pair.Key #>, settings.<#= pair.Key #>);
<#} #>

      return eq;
    }

    public partial class Builder {
      RedisSettings _settings = new RedisSettings();

<#foreach (var pair in configs) { #>
<#  if (pair.Value is string) { #>
      public Builder <#= pair.Key #>(string value) {
        _settings.<#= pair.Key #> = value;
<#  }
    else if (pair.Value is int) { #>
      public Builder <#= pair.Key #>(int value) {
        _settings.<#= pair.Key #> = value;
<#  } #>
        return this;
      }

<#} #>
      public RedisSettings Build() {
        var built = _settings;
        _settings = new RedisSettings();

        return built;
      }
    }
  }
}

