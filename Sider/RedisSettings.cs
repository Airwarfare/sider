// <auto-generated />
using System;

namespace Sider {
  public partial class RedisSettings {
    public string Host { get; internal set; }
    public int Port { get; internal set; }
    public int MaxBufferPoolSize { get; internal set; }
    public int MaxBufferSize { get; internal set; }

    public RedisSettings() {
      Host = "localhost";
      Port = 6379;
      MaxBufferPoolSize = 8388608;
      MaxBufferSize = 1048576;
    }

    public RedisSettings Clone() {
      return new RedisSettings()
      {
        Host = Host,
        Port = Port,
        MaxBufferPoolSize = MaxBufferPoolSize,
        MaxBufferSize = MaxBufferSize,
      };
    }

    public override int GetHashCode() {
      int hash = 17;
      hash = hash * 23 + Host.GetHashCode();
      hash = hash * 23 + Port.GetHashCode();
      hash = hash * 23 + MaxBufferPoolSize.GetHashCode();
      hash = hash * 23 + MaxBufferSize.GetHashCode();

      return hash;
    }

    public override bool Equals(object obj) {
      if (obj == null) return false;

      var settings = obj as RedisSettings;
      if (settings == null) return false;

      var eq = true;
      eq = eq && object.Equals(Host, settings.Host);
      eq = eq && object.Equals(Port, settings.Port);
      eq = eq && object.Equals(MaxBufferPoolSize, settings.MaxBufferPoolSize);
      eq = eq && object.Equals(MaxBufferSize, settings.MaxBufferSize);

      return eq;
    }

    public partial class Builder {
      RedisSettings _settings = new RedisSettings();

      public Builder Host(string value) {
        _settings.Host = value;
        return this;
      }

      public Builder Port(int value) {
        _settings.Port = value;
        return this;
      }

      public Builder MaxBufferPoolSize(int value) {
        _settings.MaxBufferPoolSize = value;
        return this;
      }

      public Builder MaxBufferSize(int value) {
        _settings.MaxBufferSize = value;
        return this;
      }

      public RedisSettings Build() {
        var built = _settings;
        _settings = new RedisSettings();

        return built;
      }
    }
  }
}

